<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Temperature_Humidity_Acquisition.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Temperature_Humidity_Acquisition.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Dec 25 17:03:30 2023
<BR><P>
<H3>Maximum Stack Usage =       1500 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UART0_Handler</a><BR>
 <LI><a href="#[b]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UART1_Handler</a><BR>
 <LI><a href="#[c]">TIMR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">TIMR0_Handler</a><BR>
 <LI><a href="#[d]">TIMR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">TIMR1_Handler</a><BR>
 <LI><a href="#[e]">DMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DMA_Handler</a><BR>
 <LI><a href="#[f]">SPI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SPI0_Handler</a><BR>
 <LI><a href="#[10]">PWM0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">PWM0_Handler</a><BR>
 <LI><a href="#[11]">WDT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">WDT_Handler</a><BR>
 <LI><a href="#[13]">PWM1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PWM1_Handler</a><BR>
 <LI><a href="#[14]">ADC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ADC0_Handler</a><BR>
 <LI><a href="#[15]">BTIMR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BTIMR0_Handler</a><BR>
 <LI><a href="#[16]">HALL0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">HALL0_Handler</a><BR>
 <LI><a href="#[17]">PWM2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PWM2_Handler</a><BR>
 <LI><a href="#[18]">PWMBRK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PWMBRK_Handler</a><BR>
 <LI><a href="#[19]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">I2C0_Handler</a><BR>
 <LI><a href="#[1a]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CAN0_Handler</a><BR>
 <LI><a href="#[1b]">SPI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SPI1_Handler</a><BR>
 <LI><a href="#[1c]">RTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">RTC_Handler</a><BR>
 <LI><a href="#[1d]">PWM3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PWM3_Handler</a><BR>
 <LI><a href="#[1e]">TIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">TIMR2_Handler</a><BR>
 <LI><a href="#[1f]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UART3_Handler</a><BR>
 <LI><a href="#[20]">TIMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">TIMR3_Handler</a><BR>
 <LI><a href="#[21]">ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_Handler</a><BR>
 <LI><a href="#[22]">BOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BOD_Handler</a><BR>
 <LI><a href="#[23]">CORDIC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">CORDIC_Handler</a><BR>
 <LI><a href="#[24]">BTIMR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BTIMR1_Handler</a><BR>
 <LI><a href="#[25]">PWM4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">PWM4_Handler</a><BR>
 <LI><a href="#[26]">HALL3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">HALL3_Handler</a><BR>
 <LI><a href="#[27]">BTIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">BTIMR2_Handler</a><BR>
 <LI><a href="#[28]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">I2C1_Handler</a><BR>
 <LI><a href="#[29]">BTIMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BTIMR3_Handler</a><BR>
 <LI><a href="#[2a]">ACMP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ACMP_Handler</a><BR>
 <LI><a href="#[2b]">XTALSTOP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">XTALSTOP_Handler</a><BR>
 <LI><a href="#[2c]">FSPI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">FSPI_Handler</a><BR>
 <LI><a href="#[2d]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">GPIOA_Handler</a><BR>
 <LI><a href="#[2e]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">GPIOB_Handler</a><BR>
 <LI><a href="#[2f]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">GPIOC_Handler</a><BR>
 <LI><a href="#[30]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">GPIOD_Handler</a><BR>
 <LI><a href="#[31]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">GPIOM_Handler</a><BR>
 <LI><a href="#[32]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">GPION_Handler</a><BR>
 <LI><a href="#[33]">GPIOA0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">GPIOA0_Handler</a><BR>
 <LI><a href="#[34]">GPIOA1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">GPIOA1_Handler</a><BR>
 <LI><a href="#[35]">GPIOA5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">GPIOA5_Handler</a><BR>
 <LI><a href="#[36]">GPIOA6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">GPIOA6_Handler</a><BR>
 <LI><a href="#[37]">GPIOA10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">GPIOA10_Handler</a><BR>
 <LI><a href="#[38]">GPIOA11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">GPIOA11_Handler</a><BR>
 <LI><a href="#[39]">GPIOA12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">GPIOA12_Handler</a><BR>
 <LI><a href="#[3a]">GPIOA13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">GPIOA13_Handler</a><BR>
 <LI><a href="#[3b]">GPIOB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">GPIOB0_Handler</a><BR>
 <LI><a href="#[3c]">GPIOB1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">GPIOB1_Handler</a><BR>
 <LI><a href="#[3d]">GPIOB2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">GPIOB2_Handler</a><BR>
 <LI><a href="#[3e]">GPIOC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">GPIOC0_Handler</a><BR>
 <LI><a href="#[3f]">GPIOC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">GPIOC1_Handler</a><BR>
 <LI><a href="#[40]">GPIOC2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">GPIOC2_Handler</a><BR>
 <LI><a href="#[41]">GPIOC3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">GPIOC3_Handler</a><BR>
 <LI><a href="#[42]">GPIOC4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">GPIOC4_Handler</a><BR>
 <LI><a href="#[43]">GPIOD3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">GPIOD3_Handler</a><BR>
 <LI><a href="#[44]">GPIOD4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">GPIOD4_Handler</a><BR>
 <LI><a href="#[45]">GPIOD5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">GPIOD5_Handler</a><BR>
 <LI><a href="#[46]">GPIOD6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">GPIOD6_Handler</a><BR>
 <LI><a href="#[47]">GPIOD7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">GPIOD7_Handler</a><BR>
 <LI><a href="#[48]">GPIOD8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">GPIOD8_Handler</a><BR>
 <LI><a href="#[49]">GPIOC9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">GPIOC9_Handler</a><BR>
 <LI><a href="#[4a]">GPIOC10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">GPIOC10_Handler</a><BR>
 <LI><a href="#[4b]">GPIOC11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">GPIOC11_Handler</a><BR>
 <LI><a href="#[4c]">GPIOC12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">GPIOC12_Handler</a><BR>
 <LI><a href="#[4d]">GPIOM0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">GPIOM0_Handler</a><BR>
 <LI><a href="#[4e]">GPIOM1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">GPIOM1_Handler</a><BR>
 <LI><a href="#[4f]">GPIOM2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">GPIOM2_Handler</a><BR>
 <LI><a href="#[50]">GPIOM3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">GPIOM3_Handler</a><BR>
 <LI><a href="#[51]">GPIOM4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">GPIOM4_Handler</a><BR>
 <LI><a href="#[52]">DIV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">DIV_Handler</a><BR>
 <LI><a href="#[54]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">GPIOE_Handler</a><BR>
 <LI><a href="#[55]">JPEG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">JPEG_Handler</a><BR>
 <LI><a href="#[56]">SDIO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">SDIO_Handler</a><BR>
 <LI><a href="#[57]">USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">USB_Handler</a><BR>
 <LI><a href="#[58]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">CAN1_Handler</a><BR>
 <LI><a href="#[59]">TIMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">TIMR4_Handler</a><BR>
 <LI><a href="#[5a]">BTIMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">BTIMR4_Handler</a><BR>
 <LI><a href="#[5b]">BTIMR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">BTIMR5_Handler</a><BR>
 <LI><a href="#[5c]">BTIMR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">BTIMR6_Handler</a><BR>
 <LI><a href="#[5d]">BTIMR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">BTIMR7_Handler</a><BR>
 <LI><a href="#[5e]">BTIMR8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">BTIMR8_Handler</a><BR>
 <LI><a href="#[5f]">BTIMR9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">BTIMR9_Handler</a><BR>
 <LI><a href="#[60]">BTIMR10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">BTIMR10_Handler</a><BR>
 <LI><a href="#[61]">BTIMR11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">BTIMR11_Handler</a><BR>
 <LI><a href="#[62]">DMA2D_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">DMA2D_Handler</a><BR>
 <LI><a href="#[63]">QEI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">QEI_Handler</a><BR>
 <LI><a href="#[73]">CirBuf_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">CirBuf_Write</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ACMP_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[14]">ADC0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[21]">ADC1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[22]">BOD_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[15]">BTIMR0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[60]">BTIMR10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[61]">BTIMR11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[24]">BTIMR1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[27]">BTIMR2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[29]">BTIMR3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5a]">BTIMR4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5b]">BTIMR5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5c]">BTIMR6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5d]">BTIMR7_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5e]">BTIMR8_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5f]">BTIMR9_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1a]">CAN0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[58]">CAN1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[23]">CORDIC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[52]">DIV_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[62]">DMA2D_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[e]">DMA_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[65]">FPU_Enable</a> from system_swm341.o(.text.FPU_Enable) referenced from startup_swm341.o(.text)
 <LI><a href="#[2c]">FSPI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[33]">GPIOA0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[37]">GPIOA10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[38]">GPIOA11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[39]">GPIOA12_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3a]">GPIOA13_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[34]">GPIOA1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[35]">GPIOA5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[36]">GPIOA6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2d]">GPIOA_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3b]">GPIOB0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3c]">GPIOB1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3d]">GPIOB2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2e]">GPIOB_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3e]">GPIOC0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4a]">GPIOC10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4b]">GPIOC11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4c]">GPIOC12_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3f]">GPIOC1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[40]">GPIOC2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[41]">GPIOC3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[42]">GPIOC4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[49]">GPIOC9_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2f]">GPIOC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[43]">GPIOD3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[44]">GPIOD4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[45]">GPIOD5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[46]">GPIOD6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[47]">GPIOD7_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[48]">GPIOD8_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[30]">GPIOD_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[54]">GPIOE_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4d]">GPIOM0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4e]">GPIOM1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4f]">GPIOM2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[50]">GPIOM3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[51]">GPIOM4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[31]">GPIOM_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[32]">GPION_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[16]">HALL0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[26]">HALL3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[19]">I2C0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[28]">I2C1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[55]">JPEG_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[53]">LCD_Handler</a> from lcd.o(.text.LCD_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[10]">PWM0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[13]">PWM1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[17]">PWM2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1d]">PWM3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[25]">PWM4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[18]">PWMBRK_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[63]">QEI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1c]">RTC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[56]">SDIO_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[f]">SPI0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1b]">SPI1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from dev_systick.o(.text.SysTick_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[c]">TIMR0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[d]">TIMR1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1e]">TIMR2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[20]">TIMR3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[59]">TIMR4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[a]">UART0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[b]">UART1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[12]">UART2_Handler</a> from rs485.o(.text.UART2_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1f]">UART3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[57]">USB_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[11]">WDT_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2b]">XTALSTOP_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_swm341.o(.text)
 <LI><a href="#[67]">fputc</a> from uart.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[64]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[68]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PWM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BTIMR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HALL0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWMBRK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CORDIC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BTIMR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>HALL3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BTIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BTIMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ACMP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>XTALSTOP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FSPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIOA0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIOA1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIOA5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIOA6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIOA10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIOA11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIOA12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIOA13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIOB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIOB1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIOB2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOC2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOC3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOC4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOD3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOD4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOD5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIOD6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIOD7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIOD8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIOC9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIOC10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIOC11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIOC12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIOM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIOM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIOM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIOM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIOM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DIV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>JPEG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SDIO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>BTIMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>BTIMR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>BTIMR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>BTIMR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>BTIMR8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>BTIMR9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>BTIMR10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>BTIMR11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2D_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>QEI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>FPU_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_swm341.o(.text.FPU_Enable))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>Flash_Param_at_xMHz</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, swm341_flash.o(.text.Flash_Param_at_xMHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[53]"></a>LCD_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text.LCD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LCD_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm341_lcd.o(.text.LCD_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Handler
</UL>

<P><STRONG><a name="[76]"></a>LCD_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_lcd.o(.text.LCD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Handler
</UL>

<P><STRONG><a name="[77]"></a>PLLInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system_swm341.o(.text.PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_3ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
</UL>

<P><STRONG><a name="[78]"></a>PORT_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, swm341_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
</UL>

<P><STRONG><a name="[7a]"></a>SDIO_BlockRead</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, swm341_sdio.o(.text.SDIO_BlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDIO_BlockRead &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[7c]"></a>SDIO_BlockWrite</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, swm341_sdio.o(.text.SDIO_BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDIO_BlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[7d]"></a>SDIO_Init</STRONG> (Thumb, 610 bytes, Stack size 72 bytes, swm341_sdio.o(.text.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SDIO_Init &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCSD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCID
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcSDCLKDiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[81]"></a>SDIO_MultiBlockRead</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, swm341_sdio.o(.text.SDIO_MultiBlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDIO_MultiBlockRead &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[82]"></a>SDIO_MultiBlockWrite</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, swm341_sdio.o(.text.SDIO_MultiBlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[83]"></a>SerialInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, uart.o(.text.SerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SerialInit &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_systick.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_inc_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, system_swm341.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[89]"></a>SystemInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, system_swm341.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; switchToPLL &rArr; PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART2_Handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rs485.o(.text.UART2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_Handler &rArr; CirBuf_Write &rArr;  CirBuf_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsRXFIFOEmpty
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTStat
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTClr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>UART_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_Close))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[8f]"></a>UART_INTClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[8d]"></a>UART_INTStat</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_INTStat))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[84]"></a>UART_Init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, swm341_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
</UL>

<P><STRONG><a name="[8e]"></a>UART_IsRXFIFOEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_IsRXFIFOEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[c4]"></a>UART_IsTXBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_IsTXBusy))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[85]"></a>UART_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_Open))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
</UL>

<P><STRONG><a name="[90]"></a>UART_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[c3]"></a>UART_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7b]"></a>_SDIO_SendCmd</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, swm341_sdio.o(.text._SDIO_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SDIO_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_MultiBlockWrite
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_MultiBlockRead
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_BlockWrite
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_BlockRead
</UL>

<P><STRONG><a name="[7e]"></a>calcSDCLKDiv</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, swm341_sdio.o(.text.calcSDCLKDiv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[af]"></a>disk_initialize</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = disk_initialize &rArr; SDIO_Init &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[cd]"></a>disk_ioctl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[b0]"></a>disk_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = disk_read &rArr; SDIO_MultiBlockRead &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_MultiBlockRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_BlockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[cb]"></a>disk_status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[a8]"></a>disk_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_MultiBlockWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_BlockWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[b1]"></a>f_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>f_mount</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = f_mount &rArr; mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>f_open</STRONG> (Thumb, 530 bytes, Stack size 96 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>f_read</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>f_sync</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[c1]"></a>f_write</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>ff_oem2uni</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[a1]"></a>ff_uni2oem</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[99]"></a>ff_wtoupper</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[67]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 1112 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7f]"></a>parseCID</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, swm341_sdio.o(.text.parseCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parseCID
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[80]"></a>parseCSD</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, swm341_sdio.o(.text.parseCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parseCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>

<P><STRONG><a name="[cc]"></a>switchTo20MHz</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_swm341.o(.text.switchTo20MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switchTo20MHz
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_3ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
</UL>

<P><STRONG><a name="[8b]"></a>switchToPLL</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_swm341.o(.text.switchToPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = switchToPLL &rArr; PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchTo20MHz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>systick_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dev_systick.o(.text.systick_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>systick_inc_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dev_systick.o(.text.systick_inc_tick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c5]"></a>systick_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dev_systick.o(.text.systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = systick_init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e7]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[c6]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ca]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[71]"></a>CirBuf_Full</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rs485.o(.text.CirBuf_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CirBuf_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Space
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
</UL>

<P><STRONG><a name="[72]"></a>CirBuf_Space</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rs485.o(.text.CirBuf_Space))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Full
</UL>

<P><STRONG><a name="[73]"></a>CirBuf_Write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rs485.o(.text.CirBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = CirBuf_Write &rArr;  CirBuf_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Space
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Full
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirBuf_Write
</UL>

<P><STRONG><a name="[79]"></a>delay_3ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_swm341.o(.text.delay_3ms))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchTo20MHz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
</UL>

<P><STRONG><a name="[86]"></a>SysTick_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dev_systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[87]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dev_systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[93]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, swm341_uart.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[92]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, swm341_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[94]"></a>check_fs</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[9f]"></a>chk_chr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[a7]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[98]"></a>cmp_lfn</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ff.o(.text.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[9a]"></a>create_chain</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[9d]"></a>create_name</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[a2]"></a>dir_alloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a5]"></a>dir_clear</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[a9]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a4]"></a>dir_next</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[ab]"></a>dir_register</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a3]"></a>dir_sdi</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[c2]"></a>find_volume</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[b8]"></a>follow_path</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ae]"></a>gen_numname</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ff.o(.text.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[9b]"></a>get_fat</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b5]"></a>get_ldnumber</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[b9]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[bd]"></a>ld_dword</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[96]"></a>ld_word</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[97]"></a>mem_cmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text.mem_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[ac]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[a0]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ff.o(.text.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b6]"></a>mount_volume</STRONG> (Thumb, 602 bytes, Stack size 32 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[95]"></a>move_window</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[9c]"></a>put_fat</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[ad]"></a>put_lfn</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ff.o(.text.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[bc]"></a>remove_chain</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[bb]"></a>st_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ba]"></a>st_dword</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[bf]"></a>st_word</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[aa]"></a>sum_sfn</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c0]"></a>sync_fs</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[a6]"></a>sync_window</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sync_window &rArr; disk_write &rArr; SDIO_MultiBlockWrite &rArr; _SDIO_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[9e]"></a>tchar2uni</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[b3]"></a>validate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[d0]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[d2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
